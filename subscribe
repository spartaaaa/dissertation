#!/usr/bin/env python
from paho.mqtt import client as mqtt
import sqlite3
import sys
import os
import subprocess

broker = 'broker.local'
port = 8883
# username = 'qwerty'
# password = '12qwerty21'

# Connect to the SQLite database and create the table if it doesn't exist
with sqlite3.connect('sdata.db') as conn:
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS sdata (
                        time TIMESTAMP DEFAULT (STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW')),
                        size INTEGER,
                        cpu_usage FLOAT
                    )''')
    conn.commit()

def get_cpu_usage(process_id):
    try:
        # Run the 'ps' command to get the CPU usage for the specified process ID
        command = f"ps -p {process_id} -o %cpu"
        result = subprocess.check_output(command, shell=True, text=True)
        
        # Extract the CPU value from the result
        cpu_value = result.strip().split('\n')[1]  # Assuming the second line contains the CPU value
        return float(cpu_value)
    except subprocess.CalledProcessError:
        return None

def insert_data(cursor, size, process_id):
    cpu_usage = get_cpu_usage(process_id)
    cursor.execute("INSERT INTO sdata (size, cpu_usage) VALUES (?, ?)", (size, cpu_usage))

def get_wifi_signal_strength(interface):
    try:
        output = subprocess.check_output(["iwconfig", interface])
        output = output.decode("utf-8")
        signal_line = [line for line in output.split('\n') if "Signal level" in line]
        if signal_line:
            signal_strength = signal_line[0].split("Signal level=")[1].split()[0]
            return signal_strength
        else:
            return "Signal level not found"
    except subprocess.CalledProcessError:
        return "Error retrieving signal strength"

def on_connect(client, userdata, flags, rc):
    process_id = os.getpid()
    print("Process ID:", process_id)

    # Get WiFi signal strength
    wifi_signal_strength = get_wifi_signal_strength("wlan0")
    print("WiFi Signal Strength:", wifi_signal_strength, "dBm")

    print("Connected with result code " + str(rc))
    client.subscribe("testTopic")

def on_message(client, userdata, msg):
    payload_str = msg.payload.decode()  # Convert the payload from bytes to string

    # Get the size of the received message
    size = len(payload_str)

    # Convert the size to a string
    size_str = str(size)
    print(size_str)

    # Connect to the SQLite database (the table should already exist)
    conn = sqlite3.connect('sdata.db')
    cursor = conn.cursor()

    insert_data(cursor, size_str, process_id)  # Insert data into the database

    # Commit and close the database connection
    conn.commit()
    conn.close()

def run_mqtt_client():
    global process_id
    process_id = os.getpid()
    print("Process ID:", process_id)

    client = mqtt.Client()
    # client.username_pw_set(username, password)
    client.tls_set(ca_certs="/home/qwerty/certificates/ca-root-cert.crt")
    client.on_connect = on_connect
    client.on_message = on_message

    client.connect(broker, port, 60)

    # Start the MQTT loop (this will keep the client running and processing messages)
    try:
        client.loop_forever()
    except KeyboardInterrupt:
        print("Exiting...")
        client.disconnect()
        sys.exit(0)

if __name__ == '__main__':
    run_mqtt_client()
