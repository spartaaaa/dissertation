import random
import time
import sqlite3
import sys
from paho.mqtt import client as mqtt_client
import subprocess

def create_table(cursor):
    cursor.execute('''CREATE TABLE IF NOT EXISTS authentication (
                        time TIMESTAMP DEFAULT (STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW'),
                        size INTEGER
                        cpu_usage FLOAT
                    )''')
def get_cpu_usage(process_id):
    try:
        # Run the 'ps' command to get the CPU usage for the specified process ID
        command = f"ps -p {process_id} -o %cpu"
        result = subprocess.check_output(command, shell=True, text=True)
        
        # Extract the CPU value from the result
        cpu_value = result.strip().split('\n')[1]  # Assuming the second line contains the CPU value
        return float(cpu_value)
    except subprocess.CalledProcessError:
        return None

def insert_data(cursor, size, process_id):
    cpu_usage = get_cpu_usage(process_id)
    cursor.execute("INSERT INTO send_data (size, cpu_usage) VALUES (?, ?)", (size, cpu_usage))


broker = 'broker.local'
port = 8883
topic = "testTopic"
client_id = f'python-mqtt-{random.randint(0, 1000)}'
#username = 'qwerty'
#password = '12qwerty21'

def connect_mqtt():
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)

    client = mqtt_client.Client(client_id)
    #client.username_pw_set(username, password)
    client.tls_set(ca_certs="/home/qwerty/certificates/ca-root-cert.crt")    
    client.on_connect = on_connect
    client.connect(broker, port, 60)
    return client

def publish(client):
    process_id = os.getpid()
    print("Process ID:", process_id)
    try:
        conn = sqlite3.connect('pdata.db')
        cursor = conn.cursor()

        create_table(cursor)

        msg_count = 1
        while True:
            time.sleep(1)
            msg = f"{msg_count}"
            size = len(msg)
            result = client.publish(topic, msg)
            status = result[0]
            if status == 0:
                print(f"Sending {size} to topic `{topic}`")
            else:
                print(f"Failed to send message to topic {topic}")
            insert_data(cursor, size, process_id)
            msg_count *= 10000000
    except KeyboardInterrupt:
        print("Publishing stopped by user")
    finally:
        conn.commit()
        conn.close()

def run():
    client = connect_mqtt()
    client.loop_start()
    publish(client)

if __name__ == '__main__':
    run()
