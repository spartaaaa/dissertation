import random
import time
import sqlite3
import sys

from paho.mqtt import client as mqtt_client


broker = '192.168.1.19'
port = 1883
topic = "testTopic"
# generate client ID with pub prefix randomly
client_id = f'python-mqtt-{random.randint(0, 1000)}'
username = 'qwerty'
password = '12qwerty21'

def connect_mqtt():
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)

    client = mqtt_client.Client(client_id)
    client.username_pw_set(username, password)
    client.on_connect = on_connect
    client.connect(broker, port)
    return client

def create_table(cursor):
    cursor.execute('''CREATE TABLE IF NOT EXISTS authentication (
                        time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        size INTEGER
                    )''')

def insert_data(cursor, size):
    cursor.execute("INSERT INTO authentication (size) VALUES (?)", (str(size),))

def publish(client, cursor):
    msg_count = 1
    try:
        while True:
            time.sleep(1)
            msg = f"{msg_count}"
            size = len(msg)
            result = client.publish(topic, msg)
            status = result[0]
            if status == 0:
                print(f"Send `{size}` to topic `{topic}`")
            else:
                print(f"Failed to send message to topic {topic}")
            insert_data(cursor, size)  # Insert data into the database
            msg_count *= 100000
    except KeyboardInterrupt:
        print("Publishing stopped by user")

def run():
    client = connect_mqtt()
    client.loop_start()

    # Connect to the SQLite database
    conn = sqlite3.connect('pdata.db')
    cursor = conn.cursor()

    # Create the table if it doesn't exist
    create_table(cursor)

    # Publish messages and store data in the database
    publish(client, cursor)

    # Commit and close the database connection
    conn.commit()
    conn.close()

if __name__ == '__main__':
    run()

