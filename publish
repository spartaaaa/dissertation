#!/usr/bin/env python
import random
import time
import sqlite3
import os
from paho.mqtt import client as mqtt_client
import subprocess

broker = 'broker.local'
port = 8883
topic = "testTopic"
client_id = f'python-mqtt-{random.randint(0, 1000)}'
#username = 'qwerty'
#password = '12qwerty21'

# Connect to the SQLite database and create the table if it doesn't exist
with sqlite3.connect('pdata.db') as conn:
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS pdata (
                        time TIMESTAMP DEFAULT (STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW')),
                        size INTEGER,
                        cpu_usage FLOAT
                    )''')
    conn.commit()


def get_cpu_usage(process_id):
    try:
        # Run the 'ps' command to get the CPU usage for the specified process ID
        command = f"ps -p {process_id} -o %cpu"
        result = subprocess.check_output(command, shell=True, text=True)
        
        # Extract the CPU value from the result
        cpu_value = result.strip().split('\n')[1]  # Assuming the second line contains the CPU value
        return float(cpu_value)
    except subprocess.CalledProcessError:
        return None

def insert_data(cursor, size, process_id):
    cpu_usage = get_cpu_usage(process_id)
    cursor.execute("INSERT INTO pdata (size, cpu_usage) VALUES (?, ?)", (size, cpu_usage))

def get_wifi_signal_strength(interface):
    try:
        output = subprocess.check_output(["iwconfig", interface])
        output = output.decode("utf-8")
        signal_line = [line for line in output.split('\n') if "Signal level" in line]
        if signal_line:
            signal_strength = signal_line[0].split("Signal level=")[1].split()[0]
            return signal_strength
        else:
            return "Signal level not found"
    except subprocess.CalledProcessError:
        return "Error retrieving signal strength"

def connect_mqtt():
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)

    client = mqtt_client.Client(client_id)
    #client.username_pw_set(username, password)
    client.tls_set(ca_certs="/home/qwerty/certificates/ca-root-cert.crt")    
    client.on_connect = on_connect
    client.connect(broker, port, 60)
    return client

def publish(client):
    process_id = os.getpid()
    print("Process ID:", process_id)

    # Get WiFi signal strength
    wifi_signal_strength = get_wifi_signal_strength("wlan0")
    print("WiFi Signal Strength:", wifi_signal_strength, "dBm")

    try:
        conn = sqlite3.connect('pdata.db')
        cursor = conn.cursor()
        
        x=1
        time.sleep(100)
        while x<=5: 
            msg_count = 1
            while msg_count<5:
                #time.sleep(1)
                msg = f"25.7775657768-{x}"
                
                result = client.publish(topic, msg, qos=2)
                status = result[0]
                if status == 0:
                   print(f"Sending {msg} to topic `{topic}`")
                else:
                    print(f"Failed to send message to topic {topic}")
                insert_data(cursor, msg, process_id)
                msg_count += 1
            x += 1
            time.sleep(10)  # Sleep for 10 seconds before the next iteration

    except KeyboardInterrupt:
        print("Publishing stopped by user")
    finally:
        conn.commit()
        conn.close()

def run():
    client = connect_mqtt()
    client.loop_start()
    publish(client)

if __name__ == '__main__':
    run()
