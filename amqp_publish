import time
import sqlite3
import pika
import os
import subprocess
import ssl

def get_wifi_signal_strength(interface):
    try:
        output = subprocess.check_output(["iwconfig", interface])
        output = output.decode("utf-8")
        signal_line = [line for line in output.split('\n') if "Signal level" in line]
        if signal_line:
            signal_strength = signal_line[0].split("Signal level=")[1].split()[0]
            return signal_strength
        else:
            return "Signal level not found"
    except subprocess.CalledProcessError:
        return "Error retrieving signal strength"

def create_table():
    conn = sqlite3.connect('amqpp.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS send_data (
                        time TIMESTAMP DEFAULT (STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW')),
                        size INTEGER,
                        cpu_usage FLOAT,
                        ram_usage FLOAT
                    )''')
    conn.commit()
    conn.close()
    
def get_resource_usage(process_id):
    try:
        # Run the 'ps' command to get the CPU usage for the specified process ID
        command = f"ps -p {process_id} -o %cpu,%mem"
        result = subprocess.check_output(command, shell=True, text=True)
        
        # Extract CPU and RAM values from the result
        lines = result.strip().split('\n')
        cpu_value = float(lines[1].split()[0]) if len(lines) > 1 else None
        ram_value = float(lines[1].split()[1]) if len(lines) > 1 else None
        return cpu_value, ram_value
    except subprocess.CalledProcessError:
        return None, None

def insert_data(cursor, size, process_id):
    cpu_usage, ram_usage = get_resource_usage(process_id)
    cursor.execute("INSERT INTO send_data (size, cpu_usage, ram_usage) VALUES (?, ?, ?)", (size, cpu_usage, ram_usage))

def publish(channel):

    process_id = os.getpid()
    print("Process ID:", process_id)

    # Get WiFi signal strength
    wifi_signal_strength = get_wifi_signal_strength("wlan0")
    print("WiFi Signal Strength:", wifi_signal_strength, "dBm")

    create_table()    

    try:
        conn = sqlite3.connect('amqpp.db')
        cursor = conn.cursor()

        msg_count = 1
        while True:
            time.sleep(1)
            msg = f"{msg_count}"
            size = len(msg)

            channel.basic_publish(exchange='', routing_key='hello', body=msg)

            print(f"Sending {size} to queue `hello`")
            insert_data(cursor, size, process_id)
            msg_count *= 10000000
    except KeyboardInterrupt:
        print("Publishing stopped by user")
    finally:
        conn.commit()
        conn.close()

def run():
    credentials = pika.PlainCredentials('qwerty', 'qwerty')

    context = ssl.create_default_context(cafile='/home/qwerty/certificates/ca-root-cert.crt')

    ssl_options = pika.SSLOptions(context, server_hostname='broker.local')
    parameters = pika.ConnectionParameters(host='broker.local', port=5671, credentials=credentials, ssl_options=ssl_options)

    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()
    channel.queue_declare(queue='hello')

    publish(channel)
    connection.close()

if __name__ == '__main__':
    run()