#!/usr/bin/env python
import pika, sys, os
import sqlite3
import os
import subprocess

def get_wifi_signal_strength(interface):
    try:
        output = subprocess.check_output(["iwconfig", interface])
        output = output.decode("utf-8")
        signal_line = [line for line in output.split('\n') if "Signal level" in line]
        if signal_line:
            signal_strength = signal_line[0].split("Signal level=")[1].split()[0]
            return signal_strength
        else:
            return "Signal level not found"
    except subprocess.CalledProcessError:
        return "Error retrieving signal strength"

def create_table(cursor):
    cursor.execute('''CREATE TABLE IF NOT EXISTS received_data (
                        time TIMESTAMP DEFAULT (STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW')),
                        size INTEGER
                    )''')

def insert_data(cursor, size):
    cursor.execute("INSERT INTO received_data (size) VALUES (?)", (size,))

def main():
    process_id = os.getpid()
    print("Process ID:", process_id)
    credentials = pika.PlainCredentials('qwerty', 'qwerty')
    connection = pika.BlockingConnection(pika.ConnectionParameters(host='broker.local', credentials=credentials))
    channel = connection.channel()

    channel.queue_declare(queue='hello')

    def callback(ch, method, properties, body):
        size = len(body)
        print(f" [x] Received {size} from hello")
        
        conn = sqlite3.connect('amqp.db')
        cursor = conn.cursor()

        create_table(cursor)
        insert_data(cursor, size)

        conn.commit()
        conn.close()

    channel.basic_consume(queue='hello', on_message_callback=callback, auto_ack=True)

    print(' [*] Waiting for messages. To exit press CTRL+C')
    channel.start_consuming()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('Interrupted')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)